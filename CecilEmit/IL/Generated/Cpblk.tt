<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#
var shortName = "Cpblk";
var longName = "CopyBlock";
var seed = new[]
{
	("UInt32", "IntPtr", "IntPtr", "", "" ),
};

void WriteFunc( String name, (String, String, String, String, String) v )
{
	var (a, b, c, d, e) = v;
	Write( $"\t\tpublic static TStack {name}<{d}TStack>( this IL<{a}, IL<{b}, IL<{c}, TStack>>> stack )\r\n");
	Write( "\t\t\twhere TStack : IEmittable\r\n" );
	Write( e==""?"": $"\t\t\t{e}\r\n" );
	Write( "\t\t{\r\n" );
	Write( "\t\t\treturn default;\r\n");
	Write( "\t\t}\r\n" );
}
#>
namespace CecilEmit.IL.ShortNames
{
	using System;
	public static partial class ILShortExtensions
	{
<#
foreach( var v in seed )
{
	WriteFunc( shortName, v );
}
#>
	}
}
namespace CecilEmit.IL.LongNames
{
	using System;
	public static partial class ILLongExtensions
	{
<#
foreach( var v in seed )
{
	WriteFunc( longName, v );
}
#>
	}
}