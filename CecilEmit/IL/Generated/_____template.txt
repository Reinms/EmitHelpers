<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#
var shortName = "Template";
var longName = "Template";
var seed = new (String ret, String genArgs, String mainArg, String[] args, String[] constraints )[]
{
	("TStack", "<TStack>", "TStack stack", new[] { "TStack stack", }, new[] { "TStack : IEmittable", } ),
};

void WriteFunc( String name, (String, String, String, String[], String[] ) data )
{
	var (ret, genArgs, mainArg, args, constraints ) = data;
	Write( $"\t\tpublic static {ret} {name}{genArgs}( this {mainArg}{((args==null||args.Length==0) ? "" : $", {String.Join(", ",args)}")})\r\n");
	foreach( var s in constraints )
	{
		Write( $"\t\t\twhere {s}\r\n" );
	}
	Write( "\t\t{\r\n" );
	Write( "\t\t\treturn default;\r\n");
	Write( "\t\t}\r\n" );
}
#>
namespace CecilEmit.IL.ShortNames
{
	using System;
	public static partial class ILShortExtensions
	{
<#
foreach( var v in seed )
{
	WriteFunc( shortName, v );
}
#>
	}
}
namespace CecilEmit.IL.LongNames
{
	using System;
	public static partial class ILLongExtensions
	{
<#
foreach( var v in seed )
{
	WriteFunc( longName, v );
}
#>
	}
}