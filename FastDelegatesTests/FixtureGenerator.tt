<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace FastDelegatesTests
{
	using System;
	using FastDelegates;
	using NUnit.Framework;

<#
const Int32 maxArgs = 64;
String genArgs = "";
String methodArgs = "";
String callArgs = "";

for( Int32 i = 0; i < maxArgs; ++i )
{
	var actGenArgs = $"<{genArgs}{(genArgs==""?"":", ")}TReturn>";
	var actMethodArgs = $"{methodArgs}";
	var actCallArgs = $"{callArgs}";
	Write( "\t[TestFixture]\r\n");
	Write( $"\tpublic abstract class FuncFixture{actGenArgs}\r\n");
	Write( "\t{\r\n");
	Write( $"\t\tprotected void TestFunc( FastFunc{actGenArgs}.Signature del{(genArgs==""?"":", ")}{actMethodArgs})\r\n");
	Write( "\t\t{\r\n");
	Write( $"\t\t\tFastFunc{actGenArgs} func = del;\r\n");
	Write( "\t\t\tException delThrow = null;\r\n");
	Write( "\t\t\tTReturn delVal = default;\r\n");
	Write( "\t\t\ttry\r\n");
	Write( "\t\t\t{\r\n");
	Write( $"\t\t\t\tdelVal = del({actCallArgs});\r\n");
	Write( "\t\t\t} catch( Exception e )\r\n");
	Write( "\t\t\t{\r\n");
	Write( "\t\t\t\tdelThrow = e;\r\n");
	Write( "\t\t\t}\r\n");
	Write( "\t\t\tException funcThrow = null;\r\n");
	Write( "\t\t\tTReturn funcVal = default;\r\n");
	Write( "\t\t\ttry\r\n");
	Write( "\t\t\t{\r\n");
	Write( $"\t\t\t\tfuncVal = func.Call({actCallArgs});\r\n");
	Write( "\t\t\t} catch( Exception e )\r\n");
	Write( "\t\t\t{\r\n");
	Write( "\t\t\t\tfuncThrow = e;\r\n");
	Write( "\t\t\t}\r\n");
	Write( "\t\t\tif( delThrow != null || funcThrow != null )\r\n");
	Write( "\t\t\t{\r\n" );
	Write( "\t\t\t\tAssert.That( delThrow != null && funcThrow != null );\r\n");
	Write( "\t\t\t\tAssert.That( delThrow.GetType() == funcThrow.GetType() );\r\n" );
	Write( "\t\t\t\tAssert.That( delThrow.Message == funcThrow.Message );\r\n" );
	Write( "\t\t\t} else\r\n" );
	Write( "\t\t\t{\r\n" );
	Write( "\t\t\t\tAssert.That( delVal, Is.EqualTo( funcVal ) );\r\n" );
	Write( "\t\t\t}\r\n" );
	Write( "\t\t}\r\n");
	Write( "\t}\r\n");

	if( genArgs != "" )
	{
		genArgs = $"{genArgs}, TArg{i+1}";
		methodArgs = $"{methodArgs}, TArg{i+1} arg{i+1}";
		callArgs = $"{callArgs}, arg{i+1}";
	} else
	{
		genArgs = "TArg1";
		methodArgs = "TArg1 arg1";
		callArgs = "arg1";
	}
}

#>
}